% \iffalse meta-comment
%
% File: codeanatomy.dtx Copyright (C) 2019 Hong-Phuc Bui
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/(TODO)
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2018/12/01]
%<package>\ProvidesPackage{codeanatomy}[2019/07/07 v0.1-Alpha draw Code Anatomy]
% \fi
%
% \iffalse
%<*driver>
\documentclass[full]{l3doc}  
\usepackage{fontspec}
\usepackage{biblatex}
\addbibresource{literatur.bib}
\newcommand{\slsh}{\textbackslash{}}

\def\thinmargin{\list{}{\rightmargin-50pt\leftmargin-90pt}\item[]}
\let\endthinmargin=\endlist 
\usepackage{codeanatomy}

\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.sty}
% \DoNotIndex{}
%
% \title{^^A
%   \pkg{codeanatomy} -- Draw Code Anatomy^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Hồng-Phúc Bùi^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:Hồng-Phúc Bùi}
%      {hong-phuc.bui at htwsaar dot de}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \AtEndDocument{^^A
%  \printbibliography^^A
% }
%
% \maketitle
% \tableofcontents
%
% \begin{documentation}
% \section{Introduction}
% The idea of this Package is to typeset illustrations of pieces of code with 
% annotations on each single parts of code (Code Anatomy). The origin of this idear is
% code illustrations in the texbook~\autocite{sedgewick_wayne_2016}. This package 
% just provides tool to draw those figures.
%
% \section{Tutorial} 
% In this tutorial we will draw an anatomy of a function like the
% figure~\ref{fig:tut1-function} step by step.
%
% \begin{figure} 
% \begin{centering}  
% \begin{tikzpicture}[remember picture]
% \codeBlock{^^A
% \codePart{functionHead}{function \codePart{functionName}{gcd} \codePart{parameterList}{(p, q)}}\{ \\[2.5pt] %
% \ptab{}\tikzmarknode[most top]{mostLeft}{}if (q === 0) \{\\
% \ptab\ptab{}return p; \\
% \ptab{}\} else \{\\
% \ptab\ptab{}return gcd(p, p \% q);\tikzmarknode{mostRight}{}\\
% \ptab{}\}\tikzmarknode[most bottom]{mostBottom}{}\\
% \}
% };
%
% \node(functionBody)[draw,code part,fit=(mostLeft) (mostRight) (mostBottom)] {};
%
% Anotation labels
% \codeAnnotation{functionHeadText}(-1,3)  {Function\\Head}
% \codeAnnotation{functionBodyText}(-1,1.5){Function\\Body}
% \codeAnnotation{functionNameText}(1,4)   {Function Name}
% \codeAnnotation{parameterListText} (4,4) {Paramter List}
%
% Annotation labels to Code
% \draw[->, annotation] (functionBodyText) -- (functionBody);
% \draw[->, annotation] (functionHeadText) -- (functionHead);
% \draw[->, annotation] (functionNameText) -- (functionName);
% \draw[->, annotation] (parameterListText) -- (parameterList);
% \end{tikzpicture}
%
% \caption{Anatomy of a function\label{fig:tut1-function}}
% \end{centering}
% \end{figure}
% 
% \subsection{Package Usage}
% To use this package, just insert |\usepackage{codeanatomy}| in your \LaTeX{} file.
%
% \subsection{Create an anatomy environment}
% Next step is to create a |tikzpicture| environment. All commands in this package must be placed in 
% a |tikzpicture| environment with option |remember picture|.
% 
% \begin{tikzpicture}[remember picture]
% \codeBlock{
% \textbackslash{}begin\{tikzpicture\}[\codePart{option}{remember picture}]\\
% \codePart{debugGrid}{\{[on background layer]\textbackslash{}draw[code grid debug] (-0.5,-0.5) grid (6.5,4.5);\}}\\
% \% ... \\
% \textbackslash{}end\{tikzpicture\}
% }
%
% ^^A Annotation labels
% \codeAnnotation{optionText}    (5,2.5) {necsessary for\\later mark}
% \codeAnnotation{debugGridText} (7,0)   {plot a thin grey grid on background\\usefull to determinate coordinate of annotation}
%
% ^^A Annotation labels to code
% \draw[->, annotation] (optionText) -- (option);
% \draw[->, annotation] (debugGridText) -- (debugGrid);
% \end{tikzpicture}
%
% \subsection{Typeset Code Listing in a Tikz-Node}
% As next step we need to put the piece of code in the |tikzpicture| environment using 
% the command |\codeBlock|. \medskip
%
% 
% \begin{thinmargin}
% \begin{tikzpicture}[remember picture]
% \codeBlock{
% \textbackslash{}begin\{tikzpicture\}[remember picture]\\
% \{[on background layer]\textbackslash{}draw[code grid debug]\\
%                        \ptab\ptab (-0.5,-0.5) grid (6.5,4.5);\}\\
% \textbackslash{}codeBlock\{\% \\
% \extremPoint{mostLeft}[most top]function gcd(p, q) \{ \\
% \ptab{}if (q === 0) \{ \\
% \ptab\ptab{}return p; \\
% \ptab{}\} else \{ \\
% \ptab\ptab{}return gcd(p, p\%q);\extremPoint{mostRight}\\
% \ptab\} \\
% \extremPoint{mostBottom}[most bottom]\}\\
% \} \\
% \textbackslash{}end\{tikzpicture\}
% }
%
% \node(codeBlockBody)[draw,code part,fit=(mostLeft) (mostRight) (mostBottom)] {};
%
% \codeAnnotation{codeBlockBodyText} (7,2.5) {Anatomy of Code}
% \draw[->, annotation] (codeBlockBodyText) -- (codeBlockBody);
% \end{tikzpicture}
% \end{thinmargin}
% 
% The result of the above code is shown in the figure~\ref{fig:function-compressed},
% which is not what we really want. All extra whitespaces and newlines in the 
% listing are removed, further more |{| and |}| are interpreted as \LaTeX{} tokens and are not 
% displayed.
%
% \begin{figure}[h]
% \begin{centering}  
% \begin{tikzpicture}[remember picture]
% {[on background layer]\draw[code grid debug] (-0.5,-0.5) grid (6.5,4.5);}
% \codeBlock{
% function gcd(p, q) {
%     if (q === 0) {
%         return p;
%     } else {
%         return gcd(p, p\%q);
%     }
% }
% }
% \end{tikzpicture}
% \caption{Unformated Code\label{fig:function-compressed}}  
% \end{centering}
% \end{figure}
% 
% 
% We need to put |\ptab| and |\\| into code to keep whitespaces and newlines. The characters |{| and |}|
% also need to be escaped by prefixing a |\| before them.
% 
% \begin{thinmargin}
% \begin{tikzpicture}[remember picture]
% \codeBlock{
% \textbackslash{}begin\{tikzpicture\}[remember picture]\\
% \{[on background layer]\textbackslash{}draw[code grid debug]\\
%                        \ptab\ptab (-0.5,-0.5) grid (6.5,4.5);\}\\
% \textbackslash{}codeBlock\{\%\\
% function gcd(p, q) \slsh\{                          \codePart{sh1}{\slsh\slsh}\\
% \codePart{ptab1}{\slsh{}ptab\{\}}if (q === 0) \slsh\{                 \codePart{sh2}{\slsh\slsh}\\
% \codePart{ptab2}{\slsh{}ptab\slsh{}ptab\{\}}return p;                 \codePart{sh3}{\slsh\slsh}\\
% \codePart{ptab3}{\slsh{}ptab}\slsh\} else \slsh\{                     \codePart{sh4}{\slsh\slsh}\\
% \codePart{ptab4}{\slsh{}ptab\slsh{}ptab\{\}}return gcd(p, p\slsh\%q); \codePart{sh5}{\slsh\slsh}\\
% \codePart{ptab5}{\slsh{}ptab}\slsh\}                                  \codePart{sh6}{\slsh\slsh}\\
% \slsh\}                                             \codePart{sh7}{\slsh\slsh}\\
% \} \\
% \textbackslash{}end\{tikzpicture\}
% }
%
% ^^A Annotation labels
% \codeAnnotation{shText}    (9,2.5) {Double backslash}
% \codeAnnotation{ptabText}  (-2,2.5) {\texttt{\slsh{}ptab} proceduces\\whitespaces}
% ^^A Annotation labels to code
% \draw[->, annotation] (shText.20) to[out=90,in=0] (sh1.east);
% \draw[->, annotation] (shText.80) to[out=95,in=0] (sh2.east);
% \draw[->, annotation] (shText) -- (sh3);
% \draw[->, annotation] (shText) -- (sh4);
% \draw[->, annotation] (shText) -- (sh5);
% \draw[->, annotation] (shText.270) to[out=260,in=0] (sh6);
% \draw[->, annotation] (shText.340) to[out=260,in=0] (sh7);
%
% \draw[->, annotation] (ptabText) -- (ptab1.west);
% \draw[->, annotation] (ptabText) -- (ptab2.west);
% \draw[->, annotation] (ptabText) -- (ptab3.west);
% \draw[->, annotation] (ptabText) -- (ptab4.west);
% \draw[->, annotation] (ptabText) -- (ptab5.west);
% \end{tikzpicture}
% \end{thinmargin}
%
% The result (figure~\ref{fig:function-formated}) is much more like what we expect 
% than the version before (figure~\ref{fig:function-compressed}).
%
% \begin{figure}[h]
% \begin{centering}
% \begin{tikzpicture}[remember picture]
% {[on background layer]\draw[code grid debug] (-0.5,-0.5) grid (6.5,4.5);}
% \codeBlock{
% function gcd(p, q) \{ \\
% \ptab{}if (q === 0) \{ \\
% \ptab\ptab{}return p; \\
% \ptab\} else \{ \\
% \ptab\ptab{}return gcd(p, p\%q); \\
% \ptab\} \\
% \} \\
% }
% \end{tikzpicture}    
% \caption{Formated Function\label{fig:function-formated}}
% \end{centering}
% \end{figure}
%
% \subsection{Mark Parts of Code}
% Now we can mark interesting parts of code with a blue boxes created by |\codePart|. At some positions 
% we can use |\\[<length>]| to add a little amount of vertical space, sothat the boxes do not touch 
% each others. 
%
% \begin{thinmargin}
% \begin{tikzpicture}[remember picture]
% {[on background layer]\draw[code grid debug] (-0.5,-0.5) grid (10.5,4.5);}\\  
% \codeBlock{
% \textbackslash{}begin\{tikzpicture\}[remember picture]\\
% \{[on background layer]\textbackslash{}draw[code grid debug]\\
%                        \ptab\ptab (-0.5,-0.5) grid (6.5,4.5);\}\\
% \textbackslash{}codeBlock\{\%\\
% \codePart{nestedCodePart}{\slsh{}codePart\{functionHead\}\{function\slsh{}codePart\{functionName\}\{gcd\} \slsh{}codePart\{paramList\}\{(p, q)\}\}} \slsh\{\\
%   \slsh\slsh[2.5pt]\\
% \slsh{}ptab\{\}\codePart{ep1}{\slsh{}extremPoint\{mostLeft\}[most top]}if (q === 0) \slsh\{                                                                                \slsh\slsh\\
% \slsh{}ptab\slsh{}ptab\{\}                                           return p;                                                                                       \slsh\slsh\\
% \slsh{}ptab\slsh                                                 \} else \slsh\{                                                                                     \slsh\slsh\\
% \slsh{}ptab\slsh{}ptab\{\}                                           return gcd(p, p\slsh\%q);       \codePart{ep2}{\slsh{}extremPoint\{mostRight\}}                 \slsh\slsh\\
% \slsh{}ptab\codePart{ep3}{\slsh{}extremPoint\{mostBottom\}[most bottom]}\slsh\}                                                                                                      \slsh\slsh\\
% \slsh\}                                             \slsh\slsh\\
% \} \\ 
%    \\
% \codePart{fitExtemCmd}{\slsh{}fitExtrem\{functionBody\}\{(mostLeft) (mostRight) (mostBottom)\}}\\
% \slsh{}end\{tikzpicture\}
% }
%  
% \codeAnnotation{nestedCodePartText}(11,6){\texttt{codePart} can be nested}
% \codeAnnotation{exText}            (15,3){\texttt{extremPoint}s\\are used to mark\\outer most points of\\a multiline code part}
% \codeAnnotation{fitExtemCmdText}   (6,-1){\texttt{fitExtrem} draws a rectangle\\which covers all passed exterm points}
%
% \draw[->, annotation] (nestedCodePartText) to[out=270,in=90] (nestedCodePart);
% \draw[->, annotation] (exText) to[out=145,in=320] (ep1.south east);
% \draw[->, annotation] (exText) to[out=190,in=300] (ep2.320);
% \draw[->, annotation] (exText) to[out=220,in=350] (ep3.340);
% \draw[->, annotation] (fitExtemCmdText) -- (fitExtemCmd);
% \end{tikzpicture} 
% \end{thinmargin}
%
%
% \begin{figure}[ht]
% \centering
% \begin{tikzpicture}[remember picture]
% {[on background layer]\draw[code grid debug]
% (-0.5,-0.5) grid (6.5,4.5);}
% \codeBlock{%
% \codePart{functionHead}{                  function\codePart{functionName}{gcd} \codePart{paramList}{(p, q)}} \{ 
%  \\[2.5pt]
% \ptab{}\extremPoint{mostLeft}[most top]      if (q === 0) \{ \\
% \ptab\ptab{}                                      return p; \\
% \ptab                                        \} else \{ \\
% \ptab\ptab{}                                      return gcd(p, p\%q); \extremPoint{mostRight} \\
% \ptab\extremPoint{mostBottom}[most bottom]\} \\
% \} \\
% }
% \fitExtrem{functionBody}{(mostLeft) (mostRight) (mostBottom)}
% \end{tikzpicture}
% \caption{Function with marked parts\label{fig:function-parts}}
% \end{figure}
%
% \subsection{Create Annotation Labels}
% We can use |\codeAnnotation| to create annotation labels for each parts of code. To draw an 
% arrow from label to a code part we can use the Tikz command\\
% |\draw[->,annotation]| \parg{annotation label} |--| \parg{code part} |;|.\\
% Whereas \parg{annotation label}s are the first argument of |\codeAnnotation|s and 
% \parg{code part}s are the first argument of |\codePart|s.
%
% \begin{thinmargin}
% \begin{tikzpicture}[remember picture]
% \codeBlock{
% \textbackslash{}begin\{tikzpicture\}[remember picture]\\
% \{[on background layer]\textbackslash{}draw[code grid debug]\\
%                        \ptab\ptab (-0.5,-0.5) grid (6.5,4.5);\}\\
% \textbackslash{}codeBlock\{\%\\
% \slsh{}codePart\{functionHead\}                                \{function \slsh{}codePart\{functionName\}\{gcd\} \slsh{}codePart\{paramList\}\{(p, q)\}\} \slsh\{\\
%   \slsh\slsh[2.5pt]\\
% \slsh{}ptab\{\}\slsh{}extremPoint\{mostLeft\}[most top]          if (q === 0) \slsh\{                                                                                \slsh\slsh\\
% \slsh{}ptab\slsh{}ptab\{\}                                           return p;                                                                                       \slsh\slsh\\
% \slsh{}ptab\slsh                                                 \} else \slsh\{                                                                                     \slsh\slsh\\
% \slsh{}ptab\slsh{}ptab\{\}                                           return gcd(p, p\slsh\%q);       \slsh{}extremPoint\{mostRight\}                                 \slsh\slsh\\
% \slsh{}ptab\slsh{}extremPoint\{mostBottom\}[most bottom]\slsh\}                                                                                                      \slsh\slsh\\
% \slsh\}                                             \\
% \} \\ 
%    \\
% \slsh{}fitExtrem\{functionBody\}\{(mostLeft) (mostRight) (mostBottom)\}\\ 
% \\
% \% Annotations \\
% \slsh{}codeAnnotation\{functionHeadText\}(-1,3)\{Function\slsh\slsh{}head\} \\
% \slsh{}codeAnnotation\{functionBodyText\}(-1,1)\{Function\slsh\slsh{}body\} \\
% \slsh{}codeAnnotation\{functionNameText\}( 1,4)\{Function\slsh\slsh{}name\} \\
% \slsh{}codeAnnotation\{paramListText\}   ( 3,4)\{Parameter\slsh\slsh{}list\} \\
% \\
% \% Annotation labels to code parts\\
% \slsh{}draw[->,annotation] (functionHeadText) -- (functionHead);\\
% \slsh{}draw[->,annotation] (functionBodyText) -- (functionBody);\\
% \slsh{}draw[->,annotation] (functionNameText) -- (functionName);\\
% \slsh{}draw[->,annotation] (paramListText) -- (paramList);\\
% \slsh{}end\{tikzpicture\}
% }
%
% \end{tikzpicture} 
% \end{thinmargin}
% 
% Instead of operator |--| we can use operator |to| \oarg{tikz options} to draw a path from 
% \parg{annotation label} to \parg{code part}. Finally we can remove the command 
% |\draw[code grid debug]...| at the begin of the |tikzpicture|.
% The final result is shown in the figure~\ref{fig:function-final}, which is almost the same
% as figure~\ref{fig:tut1-function}.
%
% \begin{figure}[ht]
% \centering 
% \begin{tikzpicture}[remember picture]
% \codeBlock{%
% \codePart{functionHead} {function \codePart{functionName}{gcd} \codePart{paramList}{(p, q)}} \{
% \\[2.5pt]
% \ptab{}\extremPoint{mostLeft}[most top] if (q === 0)\{ \\
% \ptab\ptab{} return p; \\
% \ptab\} else \{ \\
% \ptab\ptab{} return gcd(p, p\%q); \extremPoint{mostRight} \\
% \ptab\extremPoint{mostBottom}[most bottom]\} \\
% \}
% }
% \fitExtrem{functionBody}{(mostLeft) (mostRight) (mostBottom)}
%
% % Annotations
% \codeAnnotation{functionHeadText}(-1,3){Function\\head}
% \codeAnnotation{functionBodyText}(-1,1){Function\\body}
% \codeAnnotation{functionNameText}( 1,4){Function\\name}
% \codeAnnotation{paramListText}   ( 3,4){Parameter\\list}
%
% % Annotation labels to code parts
% \draw[->,annotation] (functionHeadText) -- (functionHead);
% \draw[->,annotation] (functionBodyText) -- (functionBody);
% \draw[->,annotation] (functionNameText) -- (functionName);
% \draw[->,annotation] (paramListText) -- (paramList);
% \end{tikzpicture}
%    
% \caption{Function with Annotation Labels\label{fig:function-final}}
% \end{figure}
%
% \section{Description of commands}
% TODO
%
% \end{documentation}
% 
% \begin{implementation}
% ^^A %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Implementation}
%
%
%
% \subsection{Package Dependenies}
%    \begin{macrocode}
\RequirePackage{expl3}
\RequirePackage{xparse}
\RequirePackage[rgb]{xcolor}
\RequirePackage{tikz}
%    \end{macrocode}
%
% \subsection{Setup styles}
% 
% 
% \begin{macro}{annotation}
% \begin{macro}{bgcmdcolor}
%  Define colors which are used in Code Anatomy.
%    \begin{macrocode}
\definecolor{annotation}{rgb}{0,0.50002,1} % Blue
\colorlet{bgcmdcolor}{gray}                % Grey
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Load necsessary Tikz Libraries.
%    \begin{macrocode}
\usetikzlibrary{
   tikzmark  
  ,fit
  ,arrows.meta
  ,bending
  ,shapes
  ,chains
  ,backgrounds
  ,scopes
  ,decorations
  ,decorations.pathmorphing
}
%    \end{macrocode}
%
%
% Tikz styles for code in a Code Anatomy
% \begin{macro}{anatomy}
% \begin{macro}{code part}
% Tikz styles used in Code listings and their single parts  
%    \begin{macrocode}
\tikzset{anatomy/.style={%
      anchor=south west,%
      inner sep=0,%
      align=left,%
      font=\ttfamily
    }
}
\tikzset{code part/.style={%
      rectangle,%
      draw=annotation,%
      align=left,%
      minimum height=1.175em,%
      inner sep=1.75pt,%
      outer sep=0pt,%
      font=\ttfamily
    }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{annotation}
% \begin{macro}{code annotation}
% TikZ styles used to typeset labels of code parts and arrows from labels to 
% code parts
%    \begin{macrocode}
\tikzset{annotation/.style={%
      preaction={
          draw=white,%
          line width=3.5pt,%
          arrows={-Triangle Cap[]},%
      },%
      draw=annotation,%
      arrows={-Latex[%
          round,%
          color=annotation]
      }
    }
}
\tikzset{code annotation/.style={%
      inner sep=2pt,%
      text=annotation,%
      align=center,%
      font=\sffamily\small
    }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{code grid}
% \begin{macro}{code grid debug}
% TikZ styles to draw debug grid on the background of anatomy  
%    \begin{macrocode}
\tikzset{code grid/.style={%
      step=1.0,%
      draw=none,%
      very thin,%
      on background layer
    }
}
\tikzset{code grid debug/.style={%
      step=1.0,%
      draw=gray!20,%
      very thin,%
      on background layer
    }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{most top}
% \begin{macro}{most bottom}
% These styles can be used as optional argument of |\extremPoint|. The increase the vertical
% space between the border and the code part.
%    \begin{macrocode}
\tikzset{most top/.style={%
    minimum height=1.25em
  }
}
\tikzset{most bottom/.style={%
    minimum height=1.125em
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \subsection{Command used to set code and code anatomy}
%
% \begin{macro}{\codeBlock}
% Complete code listing of a Code Anatomy figure is typeset by this command.
% Syntax |\codeBlock| \marg{code}, whereas \marg{code} is the \emph{formatted} code listing.
%    \begin{macrocode}
\NewDocumentCommand{\codeBlock}{m}%
  {\node(code) [anatomy] at (0,0) {#1};}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\codePart}
% Assign a piece of typeset code --typical in one line-- to a Tikz Node, so that it can
% be annotated. Syntax: |\codePart| \marg{node name} \marg{piece of code} whereas \marg{node name}
% is a unique TikZ node name in the |tikzpicture| and \marg{piece of code} is a single code part 
% to be marked.
%    \begin{macrocode}
\NewDocumentCommand{\codePart}{mm} %
    {\tikzmarknode[code part]{#1}{#2}}
%    \end{macrocode} 
% \end{macro}
%
% \begin{macro}{\extremPoint}
% Create a TikZ Node as reference point for later use in |\fitExtrem|. 
% Syntax |\extremPoint| \marg{node name} \oarg{style} whereas \marg{node name} is the 
% TikZ node name which is used in |\fitExtrem| to reference to this point and \oarg{style}
% is one of |most top| or |most bottom| or a TikZ defined by user.
%    \begin{macrocode}
\NewDocumentCommand{\extremPoint}{m O{}}
    {\tikzmarknode[#2]{#1}{}}
%    \end{macrocode}
%  \end{macro}
% \begin{macro}{\fitExtrem}
% Create a rectangle box over given extrem points defined by |\extremPoint{}|.
% Syntax: |\fitExtrem| \marg{node name} \marg{extrem points} whereas \marg{node name}
% is a unique TikZ node name in the current anatomy and \marg{extrem points} is a list
% of TikZ node name created by |\extremPoint|, each name is surrounded by |()|.
%    \begin{macrocode}
\NewDocumentCommand{\fitExtrem}{mm}
    {\node(#1)[draw,code part,fit={#2}]{};}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\bgcode}
% Typeset a piece of code in color |bgcmdcolor|. Syntax |\bgcode| \marg{piece of code}
%    \begin{macrocode}
\NewDocumentCommand{\bgcode}{m}{\textcolor{bgcmdcolor}{#1}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ptab}
% \begin{macro}{\phspace} 
% Produce a horizontal space of 4 small characters |h| respective 1 small character |h|
%    \begin{macrocode}
\NewDocumentCommand{\ptab}{}{\phantom{hhhh}}
\NewDocumentCommand{\phspace}{}{\phantom{h}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\codeAnnotation}
% Typeset Annotation labels for a code Part. Syntax: |\codeAnnotation| \marg{node name} \parg{coordinate} \marg{label text}
% whereas \marg{node name} is a unique TikZ node name in the |tikzpicture|, \parg{coordinate} is the coordinate of the 
% annotation label, surrounded by a |()|, \marg{label text} text content to be typeset.
%    \begin{macrocode}
\NewDocumentCommand{\codeAnnotation}{m r() m } %
{
  \node(#1)[code annotation] at (#2) {#3} ;
}
%    \end{macrocode}
% \end{macro}
% \end{implementation}
%
%

